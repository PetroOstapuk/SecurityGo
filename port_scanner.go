package main

import (
	"fmt"
	"net"
	"sort"
	"strconv"
	"sync"
	"time"
)

func worker(host string, ports <-chan int, results chan<- int, wg *sync.WaitGroup) {
	defer wg.Done()

	for p := range ports {
		address := fmt.Sprintf("%s:%d", host, p)
		conn, err := net.DialTimeout("tcp", address, 1*time.Second)
		if err == nil {
			conn.Close()
			results <- p
		} else {
			results <- 0
		}
	}
}

func main() {
	const workerCount = 100
	startTime := time.Now()

	// –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Ö–æ—Å—Ç–∞ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ—Ä—Ç—ñ–≤
	fmt.Print("üñ•Ô∏è –í–≤–µ–¥—ñ—Ç—å —Ö–æ—Å—Ç –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: ")
	var host string
	fmt.Scanln(&host)

	fmt.Print("üî¢ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ç—ñ–≤ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1024): ")
	var maxPorts string
	fmt.Scanln(&maxPorts)

	numPorts, err := strconv.Atoi(maxPorts)
	if err != nil || numPorts <= 0 {
		fmt.Println("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –ø–æ—Ä—Ç—ñ–≤:", err)
		return
	}

	// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
	fmt.Println("üöÄ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—ñ–≤...")

	// –ö–∞–Ω–∞–ª–∏ –¥–ª—è –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –º—ñ–∂ –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏
	ports := make(chan int, workerCount)
	results := make(chan int, numPorts)

	var wg sync.WaitGroup
	var openPorts []int

	// –°—Ç–∞—Ä—Ç—É—î–º–æ –≤–æ—Ä–∫–µ—Ä–∏
	for i := 0; i < workerCount; i++ {
		wg.Add(1)
		go worker(host, ports, results, &wg)
	}

	// –î–æ–¥–∞—î–º–æ –∑–∞–¥–∞—á—ñ –Ω–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—ñ–≤
	go func() {
		for i := 1; i <= numPorts; i++ {
			ports <- i
		}
		close(ports) // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–∞–Ω–∞–ª –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—Ä—Ç—ñ–≤
	}()

	// –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	go func() {
		for port := range results {
			if port != 0 {
				openPorts = append(openPorts, port)
			}
		}
	}()

	// –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	wg.Wait()

	// –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–∞–Ω–∞–ª results –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∏–º
	close(results)

	// –û–±—á–∏—Å–ª—é—î–º–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
	elapsed := time.Since(startTime)

	// –í–∏–≤–æ–¥–∏–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ—Ä—Ç–∏
	sort.Ints(openPorts)
	fmt.Println("\nüìã –í—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ—Ä—Ç–∏:")
	if len(openPorts) > 0 {
		for _, port := range openPorts {
			fmt.Printf("  ‚úÖ  %d\n", port)
		}
	} else {
		fmt.Println("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ—Ä—Ç—ñ–≤.")
	}

	// –í–∏–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
	fmt.Printf("\n‚è≥ –ß–∞—Å: %s\n", elapsed.Round(time.Second))
	fmt.Println("\n‚úÖ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
}
